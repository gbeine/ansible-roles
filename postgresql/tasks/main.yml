---
# tasks file for roles/postgresql

- name: Install and configure PostgreSQL client
  tags: [ 'postgresql' ]
  when: postgresql__client_enable
  block:

  - name: Install PostgreSQL client packages
    tags: [ 'packages' ]
    ansible.builtin.apt:
      name: "{{ item }}"
      install_recommends: no
      state: present
    with_items: "{{ postgresql__client_packages_combined }}"

- name: Install and configure PostgreSQL server
  tags: [ 'postgresql' ]
  when: postgresql__server_enable
  block:
  
  - name: Install PostgreSQL server packages
    tags: [ 'packages' ]
    ansible.builtin.apt:
      name: "{{ item }}"
      install_recommends: no
      state: present
    with_items: "{{ postgresql__server_packages_combined }}"
    register: postgresql_server_packages_installation_result

  - name: Generate configuration 
    tags: [ 'configuration' ]
    ansible.builtin.template:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      owner: root
      group: root
      mode: 0644
    with_items:
    - src: etc/postgresql/pg_hba.conf.j2
      dest: "/etc/postgresql/{{ postgresql__version }}/main/pg_hba.conf"
    - src: etc/postgresql/pg_ident.conf.j2
      dest: "/etc/postgresql/{{ postgresql__version }}/main/pg_ident.conf"
    - src: etc/postgresql/postgresql.conf.j2
      dest: "/etc/postgresql/{{ postgresql__version }}/main/postgresql.conf"
    notify:
    - Restart postgresql

  - name: Create database users with attributes
    tags: [ 'configuration' ]
    become: true
    become_user: postgres
    community.postgresql.postgresql_user:
      name: "{{ item.name }}"
      db: "{{ item.database }}"
      password: "{{  postgresql__password[item.name] }}"
      role_attr_flags: "{{ item.attributes }}"
      state: present
    with_items: "{{ postgresql__accounts }}"

  - name: Create databases
    tags: [ 'configuration' ]
    become: true
    become_user: postgres
    community.postgresql.postgresql_db:
      name: "{{ item.name }}"
      owner: "{{ item.owner | default('postgres') }}"
      state: present
    with_items: "{{ postgresql__databases }}"

  - name: Grant privileges to roles
    tags: [ 'configuration' ]
    become: true
    become_user: postgres
    community.postgresql.postgresql_privs:
      db: "{{ item.database }}"
      privs: "{{ item.privileges | join(',') }}"
      type: "{{ item.type }}"
      objs: "{{ item.objects | join(',') }}"
      roles: "{{ item.roles | join(',') }}"
      schema: "{{ item.schema | default('public') }}"
      state: present
    with_items: "{{ postgresql__privileges }}"
