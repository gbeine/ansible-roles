//
// {{ ansible_managed }}
//

// Unattended-Upgrade::Origins-Pattern controls which packages are
// upgraded.
// 
// Ubuntu:
// Note that in Ubuntu security updates may pull in new dependencies
// from non-security sources (e.g. chromium). By allowing the release
// pocket these get automatically pulled in.
Unattended-Upgrade::Origins-Pattern {
{% for op in apt__unattended_upgrades_origin_pattern %}
{%   if op is iterable and op is not string %}
    "origin={{ op.origin }}, codename={{ op.codename }}, label={{ op.label }}";
{%   else %}
    "{{ op }}";
{%   endif %}
{% endfor %}
};

// List of packages to not update (regexp are supported)
//
// Ubuntu:
// Python regular expressions, matching packages to exclude from upgrading
Unattended-Upgrade::Package-Blacklist {
};

// This option controls whether the development release of Ubuntu will be
// upgraded automatically. Valid values are "true", "false", and "auto".
Unattended-Upgrade::DevRelease "auto";

// This option allows you to control if on a unclean dpkg exit
// unattended-upgrades will automatically run
//   dpkg --force-confold --configure -a
// The default is true, to ensure updates keep getting installed
Unattended-Upgrade::AutoFixInterruptedDpkg "{{ apt__unattended_upgrades_auto_fix_interrupted_dpkg | bool | lower }}";

// By default unattended-upgrade script performs upgrades of all packages, even
// if they require a service restart. Set this parameter to "false" to not
// perform automatic upgrades of such services.
Unattended-Upgrade::IgnoreAppsRequireRestart "{{ apt__unattended_upgrades_ignore_apps_require_restart | bool | lower }}";

// Split the upgrade into the smallest possible chunks so that
// they can be interrupted with SIGUSR1. This makes the upgrade
// a bit slower but it has the benefit that shutdown while a upgrade
// is running is possible (with a small delay)
Unattended-Upgrade::MinimalSteps "{{ apt__unattended_upgrades_minimal_steps | bool | lower }}";

// Install all unattended-upgrades when the machine is shuting down
// instead of doing it in the background while the machine is running
// This will (obviously) make shutdown slower
//
// Ubuntu:
// Unattended-upgrades increases logind's InhibitDelayMaxSec to 30s.
// This allows more time for unattended-upgrades to shut down gracefully
// or even install a few packages in InstallOnShutdown mode, but is still a
// big step back from the 30 minutes allowed for InstallOnShutdown previously.
// Users enabling InstallOnShutdown mode are advised to increase
// InhibitDelayMaxSec even further, possibly to 30 minutes.
Unattended-Upgrade::InstallOnShutdown "{{ apt__unattended_upgrades_install_on_shutdown | bool | lower }}";

// Send email to this address for problems or packages upgrades
// If empty or unset then no email is sent, make sure that you
// have a working mail setup on your system. A package that provides
// 'mailx' must be installed. E.g. "user@example.com"
Unattended-Upgrade::Mail "{{ apt__unattended_upgrades_mail }}";

// Set this value to one of:
//    "always", "only-on-error" or "on-change"
// If this is not set, then any legacy MailOnlyOnError (boolean) value
// is used to chose between "only-on-error" and "on-change"
Unattended-Upgrade::MailReport "{{ apt__unattended_upgrades_mail_report }}";

// Remove unused automatically installed kernel-related packages
// (kernel images, kernel headers and kernel version locked tools).
Unattended-Upgrade::Remove-Unused-Kernel-Packages "{{ apt__unattended_upgrades_remove_unused_kernel_packages | bool | lower }}";

// Do automatic removal of newly unused dependencies after the upgrade
//Unattended-Upgrade::Remove-New-Unused-Dependencies "{{ apt__unattended_upgrades_remove_new_unused_dependencies | bool | lower }}";

// Do automatic removal of new unused dependencies after the upgrade
// (equivalent to apt-get autoremove)
Unattended-Upgrade::Remove-Unused-Dependencies "{{ apt__unattended_upgrades_remove_unused_dependencies | bool | lower }}";

// Automatically reboot *WITHOUT CONFIRMATION* if
//  the file /var/run/reboot-required is found after the upgrade
Unattended-Upgrade::Automatic-Reboot "{{ apt__unattended_upgrades_automatic_reboot | bool | lower }}";

// Automatically reboot even if there are users currently logged in
// when Unattended-Upgrade::Automatic-Reboot is set to true
//Unattended-Upgrade::Automatic-Reboot-WithUsers "{{ apt__unattended_upgrades_automatic_reboot_with_users | bool | lower }}";

// If automatic reboot is enabled and needed, reboot at the specific
// time instead of immediately
//  Default: "now"
// Unattended-Upgrade::Automatic-Reboot-Time "now";

// Enable logging to syslog. Default is False
Unattended-Upgrade::SyslogEnable "{{ apt__unattended_upgrades_syslog_enable | bool | lower }}";

// Specify syslog facility. Default is daemon
Unattended-Upgrade::SyslogFacility "{{ apt__unattended_upgrades_syslog_facility }}";

// Download and install upgrades only on AC power
// (i.e. skip or gracefully stop updates on battery)
Unattended-Upgrade::OnlyOnACPower "{{ apt__unattended_upgrades_only_on_ac_power | bool | lower }}";

// Download and install upgrades only on non-metered connection
// (i.e. skip or gracefully stop updates on a metered connection)
Unattended-Upgrade::Skip-Updates-On-Metered-Connections "{{ apt__unattended_upgrades_skip_updates_on_metered_connections | bool | lower }}";

// Verbose logging
Unattended-Upgrade::Verbose "{{ apt__unattended_upgrades_verbose | bool | lower }}";

// Print debugging information both in unattended-upgrades and
// in unattended-upgrade-shutdown
Unattended-Upgrade::Debug "{{ apt__unattended_upgrades_debug | bool | lower }}";

// Allow package downgrade if Pin-Priority exceeds 1000
Unattended-Upgrade::Allow-downgrade "{{ apt__unattended_upgrades_allow_downgrade | bool | lower }}";

// When APT fails to mark a package to be upgraded or installed try adjusting
// candidates of related packages to help APT's resolver in finding a solution
// where the package can be upgraded or installed.
// This is a workaround until APT's resolver is fixed to always find a
// solution if it exists. (See Debian bug #711128.)
// The fallback is enabled by default, except on Debian's sid release because
// uninstallable packages are frequent there.
// Disabling the fallback speeds up unattended-upgrades when there are
// uninstallable packages at the expense of rarely keeping back packages which
// could be upgraded or installed.
Unattended-Upgrade::Allow-APT-Mark-Fallback "{{ apt__unattended_upgrades_allow_apt_mark_fallback | bool | lower }}";

// vim:ft=aptconf
