###
### {{ ansible_managed }}
###

#======================= Global Settings =======================

[global]

## Browsing/Identification ###

# Change this to the workgroup/NT-domain name your Samba server will part of
   workgroup = {{ samba__server_workgroup }}

# server string is the equivalent of the NT Description field
   server string = {{ samba__server_string }}

   netbios name = {{ samba__netbios_name }}


#### Networking ####

# The specific set of interfaces / networks to bind to
# This can be either the interface name or an IP address/netmask;
# interface names are normally preferred
{{ ';' if samba__server_interfaces | length == 0 }}   interfaces = {{ samba__server_interfaces | join(' ') }}

# Only bind to the named interfaces and/or networks; you must use the
# 'interfaces' option above to use this.
# It is recommended that you enable this feature if your Samba machine is
# not protected by a firewall or is a firewall itself.  However, this
# option cannot handle dynamic or non-broadcast interfaces correctly.
{{ ';' if samba__server_interfaces | length == 0 }}   bind interfaces only = {{ samba__server_bind_interfaces_only | ternary('yes', 'no') }}

# This option is important for security. It allows you to restrict
# connections to machines which are on your local network. The
# following example restricts access to two C class networks and
# the "loopback" interface. For more examples of the syntax see
# the smb.conf man page
{{ ';' if samba__server_hosts_allow | length == 0 }}   hosts allow = {{ samba__server_hosts_allow | join(' ') }}


#### Debugging/Accounting ####

# This tells Samba to use a separate log file for each machine
# that connects
   log file = {{ samba__server_log_file }}

# Cap the size of the individual log files (in KiB).
   max log size = {{ samba__server_max_log_size }}

# We want Samba to only log to /var/log/samba/log.{smbd,nmbd}.
# Append syslog@1 if you want important messages to be sent to syslog too.
   logging = {{ samba__server_logging }}

# Do something sensible when Samba crashes: mail the admin a backtrace
   panic action = {{ samba__server_panic_action }}

   log level = {{ samba__server_log_level }}
   debug pid = {{ samba__server_debug_pid | ternary('yes', 'no') }}
   debug uid = {{ samba__server_debug_uid | ternary('yes', 'no') }}
   utmp = {{ samba__server_utmp | ternary('yes', 'no') }}
   

####### Authentication #######

# Server role. Defines in which mode Samba will operate. Possible
# values are "standalone server", "member server", "classic primary
# domain controller", "classic backup domain controller", "active
# directory domain controller". 
#
# Most people will want "standalone server" or "member server".
# Running as "active directory domain controller" will require first
# running "samba-tool domain provision" to wipe databases and create a
# new domain.
   server role = {{ samba__server_role }}

   security = {{ samba__server_security }}
   domain logons = {{ samba__server_domain_logons | ternary('yes', 'no') }}
   os level = {{ samba__server_os_level }}

   obey pam restrictions = {{ samba__server_obey_pam_restrictions | ternary('yes', 'no') }}

# This boolean parameter controls whether Samba attempts to sync the Unix
# password with the SMB password when the encrypted SMB password in the
# passdb is changed.
   unix password sync = {{ samba__server_unix_password_sync | ternary('yes', 'no') }}
   ldap password sync = {{ samba__server_ldap_password_sync | ternary('yes', 'no') }}

# For Unix password sync to work on a Debian GNU/Linux system, the following
# parameters must be set (thanks to Ian Kahan <<kahan@informatik.tu-muenchen.de> for
# sending the correct chat script for the passwd program in Debian Sarge).
   passwd program = {{ samba__server_passwd_program }}
   passwd chat = {{ samba__server_passwd_chat }}

# This boolean controls whether PAM will be used for password changes
# when requested by an SMB client instead of the program listed in
# 'passwd program'. The default is 'no'.
   pam password change = {{ samba__server_pam_password_change | ternary('yes', 'no') }}

# Specifies the Kerberos or Active Directory realm the host is part of
{{ ';' if samba__server_realm | length == 0 }}   realm = {{ samba__server_realm }}

# Backend to store user information in. New installations should 
# use either tdbsam or ldapsam. smbpasswd is available for backwards 
# compatibility. tdbsam requires no further configuration.
   passdb backend = {{ samba__server_passdb_backend }}

# Uncomment this if you want a guest account, you must add this to /etc/passwd
# otherwise the user "nobody" is used
{{ ';' if samba__server_guest_account | length == 0 }}  guest account = pcguest

# This option controls how unsuccessful authentication attempts are mapped
# to anonymous connections
   map to guest = {{ samba__server_map_to_guest }}


########## LDAP ##############

{{ ';' if not samba__smbldap_enable }}   ldap ssl = {{ samba__server_ldap_ssl }}
{{ ';' if not samba__smbldap_enable }}   ldap admin dn = {{ samba__server_ldap_admin_dn }}
{{ ';' if not samba__smbldap_enable }}   ldap delete dn = {{ samba__server_ldap_delete_dn | ternary('yes', 'no') }}

{{ ';' if not samba__smbldap_enable }}   ldap suffix = {{ samba__server_ldap_suffix }}
{{ ';' if not samba__smbldap_enable }}   ldap user suffix = {{ samba__server_ldap_user_suffix }}
{{ ';' if not samba__smbldap_enable }}   ldap group suffix = {{ samba__server_ldap_group_suffix }}
{{ ';' if not samba__smbldap_enable }}   ldap machine suffix = {{ samba__server_ldap_machine_suffix }}
{{ ';' if not samba__smbldap_enable }}   ldap idmap suffix = {{ samba__server_ldap_idmap_suffix }}


########## Domains ###########

#
# The following settings only takes effect if 'server role = classic
# primary domain controller', 'server role = classic backup domain controller'
# or 'domain logons' is set 
#

# It specifies the location of the user's
# profile directory from the client point of view) The following
# required a [profiles] share to be setup on the samba server (see
# below)
{{ ';' if not samba__server_netlogon }}   logon path = {{ samba__server_logon_path }}
# Another common choice is storing the profile in the user's home directory
# (this is Samba's default)

# The following setting only takes effect if 'domain logons' is set
# It specifies the location of a user's home directory (from the client
# point of view)
{{ ';' if not samba__server_netlogon }}   logon drive = {{ samba__server_logon_drive }}
{{ ';' if not samba__server_netlogon }}   logon home = {{ samba__server_logon_home }}

# The following setting only takes effect if 'domain logons' is set
# It specifies the script to run during logon. The script must be stored
# in the [netlogon] share
# NOTE: Must be store in 'DOS' file format convention
{{ ';' if not samba__server_netlogon }}   logon script = {{ samba__server_logon_script }}

# This allows Unix users to be created on the domain controller via the SAMR
# RPC pipe.  The example command creates a user account with a disabled Unix
# password; please adapt to your needs
{{ ';' if not samba__server_netlogon }} add user script = {{ samba__server_add_user_script }}
{{ ';' if not samba__server_netlogon }} rename user script = {{ samba__server_rename_user_script }}
{{ ';' if not samba__server_netlogon }} delete user script = {{ samba__server_delete_user_script }}
{{ ';' if not samba__server_netlogon }} set primary group script = {{ samba__server_set_primary_group_script }}

# This allows machine accounts to be created on the domain controller via the 
# SAMR RPC pipe.  
# The following assumes a "machines" group exists on the system
{{ ';' if not samba__server_netlogon }} add machine script  = {{ samba__server_add_machine_script }}

# This allows Unix groups to be created on the domain controller via the SAMR
# RPC pipe.  
{{ ';' if not samba__server_netlogon }} add group script = {{ samba__server_add_group_script }}
{{ ';' if not samba__server_netlogon }} delete group script = {{ samba__server_delete_group_script }}
{{ ';' if not samba__server_netlogon }} add user to group script = {{ samba__server_add_user_to_group_script }}
{{ ';' if not samba__server_netlogon }} delete user from group script = {{ samba__server_delete_user_from_group_script }}


########## Names #############

# Windows Internet Name Serving Support Section:
# WINS Support - Tells the NMBD component of Samba to enable it's WINS Server
   wins support = {{ samba__server_wins_support | ternary('yes', 'no') }}

# WINS Server - Tells the NMBD components of Samba to be a WINS Client
#	Note: Samba can be either a WINS Server, or a WINS Client, but NOT both
{{ ';' if samba__server_wins_server | length == 0 }}   wins server = {{ samba__server_wins_server }}

# WINS Proxy - Tells Samba to answer name resolution queries on
# behalf of a non WINS capable client, for this to work there must be
# at least one	WINS Server on the network. The default is NO.
   wins proxy = {{ samba__server_wins_proxy | ternary('yes', 'no') }}

# DNS Proxy - tells Samba whether or not to try to resolve NetBIOS names
# via DNS nslookups. The default is NO.
   dns proxy = {{ samba__server_dns_proxy | ternary('yes', 'no') }}


############ Misc ############

# Using the following line enables you to customise your configuration
# on a per machine basis. The %m gets replaced with the netbios name
# of the machine that is connecting
{{ ';' if samba__server_machines | length == 0 }}   include = /home/samba/etc/smb.conf.%m

# Some defaults for winbind (make sure you're not using the ranges
# for something else.)
{% if samba__server_winbind_defaults | length > 0 %}
;   idmap config * :              backend = tdb
;   idmap config * :              range   = 3000-7999
;   idmap config YOURDOMAINHERE : backend = tdb
;   idmap config YOURDOMAINHERE : range   = 100000-999999
;   template shell = /bin/bash
{% endif %}

# Setup usershare options to enable non-root users to share folders
# with the net usershare command.

# Maximum number of usershare. 0 means that usershare is disabled.
   usershare max shares = {{ samba__server_usershare_max_shares }}

# Allow users who've been granted usershare privileges to create
# public shares, not just authenticated ones
   usershare allow guests = {{ samba__server_usershare_allow_guests | ternary('yes', 'no') }}


#======================= Share Definitions =======================

{% for share, config in samba__server_shares.items() %}
[{{ share }}]
{% if config.comment is defined %}
   comment = {{ config.comment }}
{% endif %}
{% if config.path is defined %}
   path = {{ config.path if config.path is defined }}
{% endif %}
{% if config.browseable is defined %}
   browseable = {{ config.browseable | ternary('yes', 'no') }}
{% endif %}
{% if config.printable is defined %}
   printable = {{ config.printable | ternary('yes', 'no') }}
{% endif %}
{% if config.guest_ok is defined %}
   guest ok = {{ config.guest_ok | ternary('yes', 'no') }}
{% endif %}
{% if config.read_only is defined %}
   read only = {{ config.read_only | ternary('yes', 'no') }}
{% endif %}
{% if config.public is defined %}
   public = {{ config.public | ternary('yes', 'no') }}
{% endif %}
{% if config.only_guest is defined %}
   only guest = {{ config.only_guest | ternary('yes', 'no') }}
{% endif %}
{% if config.share_modes is defined %}
   share modes = {{ config.share_modes | ternary('yes', 'no') }}
{% endif %}
{% if config.create_mask is defined %}
   create mask = {{ config.create_mask }}
{% endif %}
{% if config.directory_mask is defined %}
   directory mask = {{ config.directory_mask }}
{% endif %}
{% if config.valid_users is defined %}
   valid users = {{ config.valid_users }}
{% endif %}
{% if config.write_list is defined %}
   write list = {{ config.write_list | join(' ') }}
{% endif %}
{% if config.profile_acls is defined %}
   profile acls = {{ config.profile_acls | ternary('yes', 'no') }}
{% endif %}
{% if config.csc_policy is defined %}
   csc policy = {{ config.csc_policy }}
{% endif %}
{% if config.map_system is defined %}
   map system = {{ config.map_system | ternary('yes', 'no') }}
{% endif %}
{% if config.map_hidden is defined %}
   map hidden = {{ config.map_hidden | ternary('yes', 'no') }}
{% endif %}
{% endfor %}
