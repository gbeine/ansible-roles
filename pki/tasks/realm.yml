---
# tasks file for roles/pki

- name: Initialize realm
  tags: [ 'pki' ]
  block:

  - name: Create realm directory
    ansible.builtin.file:
      path: "{{ pki__realms_dir }}/{{ realm.name }}"
      state: directory
      owner: root
      group: "{{ pki__public_group }}"
      mode: "{{ pki__public_dir_mode }}"

  - name: Create realm structure directories
    ansible.builtin.file:
      path: "{{ pki__realms_dir }}/{{ realm.name }}/{{ item.name }}"
      state: directory
      owner: "{{ item.owner }}"
      group: "{{ item.group }}"
      mode: "{{ item.mode }}"
    with_items: "{{ pki__realm_structure }}"

- name: Create ACME certificate for realm
  tags: [ 'pki', 'acme' ]
  when: pki__acme_enable and realm.acme | default(false)
  block:

  - name: "Has certificate for realm {{ realm.name }} been aquired?"
    ansible.builtin.stat:
      path: "{{ pki__acme_renewal_dir }}/{{ realm.name }}.conf"
    register: acme_realm_stat_result

  - name: "Aquire ACME certificate for realm {{ realm.name }}"
    when: not acme_realm_stat_result.stat.exists
    ansible.builtin.command:
      cmd: "certbot run {{ pki__acme_global_options }} --cert-name {{ realm.name }} -d {{ realm.domains | join(' -d ') }} --rsa-key-size {{ realm.key_size | default(2048) }}"
    environment: "{{ pki__acme_environment }}"

- name: Create Easy-RSA certificate for realm
  tags: [ 'pki', 'easyrsa' ]
  when: pki__easyrsa_enable and realm.easyrsa | default(false)
  block:

  - name: "Has certificate for {{ realm.name }} been generated?"
    tags: [ 'local' ]
    become: false
    local_action:
      module: ansible.builtin.stat
      path: "{{ pki__secrets_dir }}/issued/{{ realm.name }}.crt"
    register: easyrsa_realm_stat_result

  - name: "Create server certificate for {{ realm.name }}"
    tags: [ 'local' ]
    when: not easyrsa_realm_stat_result.stat.exists and realm.easyrsa_type == 'server'
    become: false
    local_action:
      module: ansible.builtin.command
      chdir: "{{ pki__secrets_dir }}"
      cmd: "{{ pki__easyrsa_path }} build-server-full {{ realm.name }}"
    environment: "{{ pki__easyrsa_environment | combine(realm.easyrsa_environment) }}"

  - name: "Create client certificate for {{ realm.name }}"
    tags: [ 'local' ]
    when: not easyrsa_realm_stat_result.stat.exists and realm.easyrsa_type == 'client'
    become: false
    local_action:
      module: ansible.builtin.command
      chdir: "{{ pki__secrets_dir }}"
      cmd: "{{ pki__easyrsa_path }} build-server-full {{ realm.name }}"
    environment: "{{ pki__easyrsa_environment | combine(realm.easyrsa_environment) }}"

  - name: "Copy private key for {{ realm.name }}"
    tags: [ 'certificate' ]
    ansible.builtin.copy:
      src: "{{ pki__secrets_dir }}/private/{{ realm.name }}.key"
      dest: "{{ pki__realms_dir }}/{{ realm.name }}/private/{{ realm.name }}.key"
      owner: root
      group: "{{ pki__private_group }}"
      mode: "{{ pki__private_file_mode }}"

  - name: "Copy certificate for {{ realm.name }}"
    tags: [ 'certificate' ]
    ansible.builtin.copy:
      src: "{{ pki__secrets_dir }}/issued/{{ realm.name }}.crt"
      dest: "{{ pki__realms_dir }}/{{ realm.name }}/public/{{ realm.name }}.crt"
      owner: root
      group: "{{ pki__public_group }}"
      mode: "{{ pki__public_file_mode }}"
    register: cert_state

  - name: "Copy CA certificate for {{ realm.name }}"
    tags: [ 'certificate' ]
    ansible.builtin.copy:
      src: "{{ pki__secrets_dir }}/ca.crt"
      dest: "{{ pki__realms_dir }}/{{ realm.name }}/public/ca.crt"
      owner: root
      group: "{{ pki__public_group }}"
      mode: "{{ pki__public_file_mode }}"

  - name: "Create fullchain for {{ realm.name }}"
    tags: [ 'certificate' ]
    when: cert_state.changed
    ansible.builtin.shell: "cat {{ pki__realms_dir }}/{{ realm.name }}/public/ca.crt {{ pki__realms_dir }}/{{ realm.name }}/public/{{ realm.name }}.crt > {{ pki__realms_dir }}/{{ realm.name }}/public/{{ realm.name }}.fullchain.crt"
