###
### {{ ansible_managed }}
###

# This file is commonly accessed via passdb {} or userdb {} section in
# conf.d/auth-ldap.conf.ext

# This file is opened as root, so it should be owned by root and mode 0600.
#
# http://wiki2.dovecot.org/AuthDatabase/LDAP
#
# NOTE: If you're not using authentication binds, you'll need to give
# dovecot-auth read access to userPassword field in the LDAP server.
# With OpenLDAP this is done by modifying /etc/ldap/slapd.conf. There should
# already be something like this:

# access to attribute=userPassword
#        by dn="<dovecot's dn>" read # add this
#        by anonymous auth
#        by self write
#        by * none

# Space separated list of LDAP hosts to use. host:port is allowed too.
{{ '#' if dovecot__ldap_hosts | length == 0 }}hosts = {{ dovecot__ldap_hosts | join(' ') }}

# LDAP URIs to use. You can use this instead of hosts list. Note that this
# setting isn't supported by all LDAP libraries.
{{ '#' if dovecot__ldap_uris | length == 0 }}uris = {{ dovecot__ldap_uris | join(' ') }}

# Distinguished Name - the username used to login to the LDAP server.
# Leave it commented out to bind anonymously (useful with auth_bind=yes).
{{ '#' if dovecot__ldap_dn | length == 0 }}dn = {{ dovecot__ldap_dn }}

# Password for LDAP server, if dn is specified.
{{ '#' if dovecot__ldap_dnpass | length == 0 }}dnpass = {{ dovecot__ldap_dnpass }}

# Use SASL binding instead of the simple binding. Note that this changes
# ldap_version automatically to be 3 if it's lower.
sasl_bind = {{ dovecot__ldap_sasl_bind | ternary('yes', 'no') }}
# SASL mechanism name to use.
{{ '#' if dovecot__ldap_sasl_mech | length == 0 }}sasl_mech = {{ dovecot__ldap_sasl_mech }}
# SASL realm to use.
{{ '#' if dovecot__ldap_sasl_realm | length == 0 }}sasl_realm = {{ dovecot__ldap_sasl_realm }}
# SASL authorization ID, ie. the dnpass is for this "master user", but the
# dn is still the logged in user. Normally you want to keep this empty.
{{ '#' if dovecot__ldap_sasl_authz_id | length == 0 }}sasl_authz_id = {{ dovecot__ldap_sasl_authz_id }}

# Use TLS to connect to the LDAP server.
tls = {{ dovecot__ldap_tls | ternary('yes', 'no') }}
# TLS options, currently supported only with OpenLDAP:
{{ '#' if dovecot__ldap_tls_ca_cert_file | length == 0 }}tls_ca_cert_file = {{ dovecot__ldap_tls_ca_cert_file }}
{{ '#' if dovecot__ldap_tls_ca_cert_dir | length == 0 }}tls_ca_cert_dir = {{ dovecot__ldap_tls_ca_cert_dir }}
{{ '#' if dovecot__ldap_tls_cipher_suite | length == 0 }}tls_cipher_suite = {{ dovecot__ldap_tls_cipher_suite }}
# TLS cert/key is used only if LDAP server requires a client certificate.
{{ '#' if dovecot__ldap_tls_cert_file | length == 0 }}tls_cert_file = {{ dovecot__ldap_tls_cert_file }}
{{ '#' if dovecot__ldap_tls_key_file | length == 0 }}tls_key_file = {{ dovecot__ldap_tls_key_file }}
# Valid values: never, hard, demand, allow, try
{{ '#' if dovecot__ldap_tls_require_cert | length == 0 }}tls_require_cert = {{ dovecot__ldap_tls_require_cert }}

# Use the given ldaprc path.
{{ '#' if dovecot__ldap_ldaprc_path | length == 0 }}ldaprc_path = {{ dovecot__ldap_ldaprc_path }}

# LDAP library debug level as specified by LDAP_DEBUG_* in ldap_log.h.
# -1 = everything. You may need to recompile OpenLDAP with debugging enabled
# to get enough output.
debug_level = {{ dovecot__ldap_debug_level }}

# Use authentication binding for verifying password's validity. This works by
# logging into LDAP server using the username and password given by client.
# The pass_filter is used to find the DN for the user. Note that the pass_attrs
# is still used, only the password field is ignored in it. Before doing any
# search, the binding is switched back to the default DN.
auth_bind = {{ dovecot__ldap_auth_bind | ternary('yes', 'no') }}

# If authentication binding is used, you can save one LDAP request per login
# if users' DN can be specified with a common template. The template can use
# the standard %variables (see user_filter). Note that you can't
# use any pass_attrs if you use this setting.
#
# If you use this setting, it's a good idea to use a different
# dovecot-ldap.conf.ext for userdb (it can even be a symlink, just as long as
# the filename is different in userdb's args). That way one connection is used
# only for LDAP binds and another connection is used for user lookups.
# Otherwise the binding is changed to the default DN before each user lookup.
#
# For example:
#   auth_bind_userdn = cn=%u,ou=people,o=org
#
{{ '#' if dovecot__ldap_auth_bind_userdn | length == 0 }}auth_bind_userdn = {{ dovecot__ldap_auth_bind_userdn }}

# LDAP protocol version to use. Likely 2 or 3.
ldap_version = {{ dovecot__ldap_ldap_version | default(3) }}

# LDAP base. %variables can be used here.
# For example: dc=mail, dc=example, dc=org
base = {{ dovecot__ldap_base }}

# Dereference: never, searching, finding, always
{{ '#' if dovecot__ldap_deref | length == 0 }}deref = {{ dovecot__ldap_deref }}

# Search scope: base, onelevel, subtree
{{ '#' if dovecot__ldap_scope | length == 0 }}scope = {{ dovecot__ldap_scope }}

# User attributes are given in LDAP-name=dovecot-internal-name list. The
# internal names are:
#   uid - System UID
#   gid - System GID
#   home - Home directory
#   mail - Mail location
#
# There are also other special fields which can be returned, see
# http://wiki2.dovecot.org/UserDatabase/ExtraFields
{{ '#' if dovecot__ldap_user_attrs | length == 0 }}user_attrs = {{ dovecot__ldap_user_attrs }}

# Filter for user lookup. Some variables can be used (see
# http://wiki2.dovecot.org/Variables for full list):
#   %u - username
#   %n - user part in user@domain, same as %u if there's no domain
#   %d - domain part in user@domain, empty if user there's no domain
{{ '#' if dovecot__ldap_user_filter | length == 0 }}user_filter = {{ dovecot__ldap_user_filter }}

# Password checking attributes:
#  user: Virtual user name (user@domain), if you wish to change the
#        user-given username to something else
#  password: Password, may optionally start with {type}, eg. {crypt}
# There are also other special fields which can be returned, see
# http://wiki2.dovecot.org/PasswordDatabase/ExtraFields
{{ '#' if dovecot__ldap_pass_attrs | length == 0 }}pass_attrs = {{ dovecot__ldap_pass_attrs }}

# If you wish to avoid two LDAP lookups (passdb + userdb), you can use
# userdb prefetch instead of userdb ldap in dovecot.conf. In that case you'll
# also have to include user_attrs in pass_attrs field prefixed with "userdb_"
# string. For example:
#pass_attrs = uid=user,userPassword=password,\
#  homeDirectory=userdb_home,uidNumber=userdb_uid,gidNumber=userdb_gid

# Filter for password lookups
{{ '#' if dovecot__ldap_pass_filter | length == 0 }}pass_filter = {{ dovecot__ldap_pass_filter }}

# Attributes and filter to get a list of all users
{{ '#' if dovecot__ldap_iterate_attrs | length == 0 }}iterate_attrs = {{ dovecot__ldap_iterate_attrs }}
{{ '#' if dovecot__ldap_iterate_filter | length == 0 }}iterate_filter = {{ dovecot__ldap_iterate_filter }}

# Default password scheme. "{scheme}" before password overrides this.
# List of supported schemes is in: http://wiki2.dovecot.org/Authentication
{{ '#' if dovecot__ldap_default_pass_scheme | length == 0 }}default_pass_scheme = {{ dovecot__ldap_default_pass_scheme }}

# By default all LDAP lookups are performed by the auth master process.
# If blocking=yes, auth worker processes are used to perform the lookups.
# Each auth worker process creates its own LDAP connection so this can
# increase parallelism. With blocking=no the auth master process can
# keep 8 requests pipelined for the LDAP connection, while with blocking=yes
# each connection has a maximum of 1 request running. For small systems the
# blocking=no is sufficient and uses less resources.
blocking = {{ dovecot__ldap_blocking | ternary('yes', 'no') }}
