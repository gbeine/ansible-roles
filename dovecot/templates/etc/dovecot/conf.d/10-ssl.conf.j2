###
### {{ ansible_managed }}
###

##
## SSL settings
##

# SSL/TLS support: yes, no, required. <doc/wiki/SSL.txt>
ssl = {{ conf.ssl | default(false) | ternary('yes', 'no') }}

# PEM encoded X.509 SSL/TLS certificate and private key. They're opened before
# dropping root privileges, so keep the key file unreadable by anyone but
# root. Included doc/mkcert.sh can be used to easily generate self-signed
# certificate, just make sure to update the domains in dovecot-openssl.cnf
{{'#' if not conf.ssl_cert is defined }}ssl_cert = <{{ conf.ssl_cert | default('/etc/dovecot/private/dovecot.pem') }}
{{'#' if not conf.ssl_key is defined }}ssl_key = <{{ conf.ssl_key | default('/etc/dovecot/private/dovecot.key') }}

# If key file is password protected, give the password here. Alternatively
# give it when starting dovecot with -p parameter. Since this file is often
# world-readable, you may want to place this setting instead to a different
# root owned 0600 file by using ssl_key_password = <path.
{{'#' if not conf.ssl_key_password is defined }}ssl_key_password = {{ '<' + conf.ssl_key_password | default('') }}

# PEM encoded trusted certificate authority. Set this only if you intend to use
# ssl_verify_client_cert=yes. The file should contain the CA certificate(s)
# followed by the matching CRL(s). (e.g. ssl_ca = </etc/ssl/certs/ca.pem)
{{'#' if not conf.ssl_ca is defined }}ssl_ca = {{ '<' + conf.ssl_ca | default('') }}

# Require that CRL check succeeds for client certificates.
{{'#' if not conf.ssl_require_crl is defined }}ssl_require_crl = {{ conf.ssl_require_crl | default(true) | ternary('yes', 'no') }}

# Directory and/or file for trusted SSL CA certificates. These are used only
# when Dovecot needs to act as an SSL client (e.g. imapc backend or
# submission service). The directory is usually /etc/ssl/certs in
# Debian-based systems and the file is /etc/pki/tls/cert.pem in
# RedHat-based systems.
{{'#' if not conf.ssl_client_ca_dir is defined }}ssl_client_ca_dir = {{ conf.ssl_client_ca_dir | default('/etc/ssl/certs') }}
{{'#' if not conf.ssl_client_ca_file is defined }}ssl_client_ca_file = {{ conf.ssl_client_ca_file | default('') }}

# Require valid cert when connecting to a remote server
{{'#' if not conf.ssl_client_require_valid_cert is defined }}ssl_client_require_valid_cert = {{ conf.ssl_client_require_valid_cert | default(true) | ternary('yes', 'no') }}

# Request client to send a certificate. If you also want to require it, set
# auth_ssl_require_client_cert=yes in auth section.
{{'#' if not conf.ssl_verify_client_cert is defined }}ssl_verify_client_cert = {{ conf.ssl_verify_client_cert | default(false) | ternary('yes', 'no') }}

# Which field from certificate to use for username. commonName and
# x500UniqueIdentifier are the usual choices. You'll also need to set
# auth_ssl_username_from_cert=yes.
{{'#' if not conf.ssl_cert_username_field is defined }}ssl_cert_username_field = {{ conf.ssl_cert_username_field | default('commonName') }}

# SSL DH parameters
# Generate new params with `openssl dhparam -out /etc/dovecot/dh.pem 4096`
# Or migrate from old ssl-parameters.dat file with the command dovecot
# gives on startup when ssl_dh is unset.
{{'#' if not conf.ssl_dh is defined }}ssl_dh = <{{ conf.ssl_dh | default('/usr/share/dovecot/dh.pem') }}

# Minimum SSL protocol version to use. Potentially recognized values are SSLv3,
# TLSv1, TLSv1.1, TLSv1.2 and TLSv1.3, depending on the OpenSSL version used.
#
# Dovecot also recognizes values ANY and LATEST. ANY matches with any protocol
# version, and LATEST matches with the latest version supported by library.
{{'#' if not conf.ssl_min_protocol is defined }}ssl_min_protocol = {{ conf.ssl_min_protocol | default('TLSv1.2') }}

# SSL ciphers to use, the default is:
{{'#' if not conf.ssl_cipher_list is defined }}ssl_cipher_list = {{ conf.ssl_cipher_list | default('ALL:!kRSA:!SRP:!kDHd:!DSS:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK:!RC4:!ADH:!LOW@STRENGTH') }}
# To disable non-EC DH, use:
#ssl_cipher_list = ALL:!DH:!kRSA:!SRP:!kDHd:!DSS:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK:!RC4:!ADH:!LOW@STRENGTH

# Colon separated list of elliptic curves to use. Empty value (the default)
# means use the defaults from the SSL library. P-521:P-384:P-256 would be an
# example of a valid value.
{{'#' if not conf.ssl_curve_list is defined }}ssl_curve_list = {{ conf.ssl_curve_list | default('') }}

# Prefer the server's order of ciphers over client's.
{{'#' if not conf.ssl_prefer_server_ciphers is defined }}ssl_prefer_server_ciphers = {{ conf.ssl_prefer_server_ciphers | default(false) | ternary('yes', 'no') }}

# SSL crypto device to use, for valid values run "openssl engine"
{{'#' if not conf.ssl_crypto_device is defined }}ssl_crypto_device = {{ conf.ssl_crypto_device | default('') }}

# SSL extra options. Currently supported options are:
#   compression - Enable compression.
#   no_ticket - Disable SSL session tickets.
{{'#' if not conf.ssl_options is defined }}ssl_options = {{ conf.ssl_options | default('') }}
