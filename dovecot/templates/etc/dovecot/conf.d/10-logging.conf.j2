###
### {{ ansible_managed }}
###

##
## Log destination.
##

# Log file to use for error messages. "syslog" logs to syslog,
# /dev/stderr logs to stderr.
{{ '#' if dovecot__logging_log_path | length == 0 }}log_path = {{ dovecot__logging_log_path }}

# Log file to use for informational messages. Defaults to log_path.
{{ '#' if dovecot__logging_info_log_path | length == 0 }}info_log_path = {{ dovecot__logging_info_log_path }}
# Log file to use for debug messages. Defaults to info_log_path.
{{ '#' if dovecot__logging_debug_log_path | length == 0 }}debug_log_path = {{ dovecot__logging_debug_log_path }}

# Syslog facility to use if you're logging to syslog. Usually if you don't
# want to use "mail", you'll use local0..local7. Also other standard
# facilities are supported.
{{ '#' if dovecot__logging_syslog_facility | length == 0 }}syslog_facility = {{ dovecot__logging_syslog_facility }}

##
## Logging verbosity and debugging.
##

# Log filter is a space-separated list conditions. If any of the conditions
# match, the log filter matches (i.e. they're ORed together). Parenthesis
# are supported if multiple conditions need to be matched together.
#
# See https://doc.dovecot.org/configuration_manual/event_filter/ for details.
#
# For example: event=http_request_* AND category=error AND category=storage
#
# Filter to specify what debug logging to enable. This will eventually replace
# mail_debug and auth_debug settings.
{{ '#' if dovecot__logging_log_debug | length == 0 }}log_debug = {{ dovecot__logging_log_debug }}

# Crash after logging a matching event. For example category=error will crash
# any time an error is logged, which can be useful for debugging.
{{ '#' if dovecot__logging_log_core_filter | length == 0 }}log_core_filter = {{ dovecot__logging_log_core_filter }}

# Log unsuccessful authentication attempts and the reasons why they failed.
auth_verbose = {{ dovecot__logging_auth_verbose | ternary('yes', 'no') }}

# In case of password mismatches, log the attempted password. Valid values are
# no, plain and sha1. sha1 can be useful for detecting brute force password
# attempts vs. user simply trying the same password over and over again.
# You can also truncate the value to n chars by appending ":n" (e.g. sha1:6).
auth_verbose_passwords = {{ dovecot__logging_auth_verbose_passwords | ternary('yes', 'no') }}

# Even more verbose logging for debugging purposes. Shows for example SQL
# queries.
auth_debug = {{ dovecot__logging_auth_debug | ternary('yes', 'no') }}

# In case of password mismatches, log the passwords and used scheme so the
# problem can be debugged. Enabling this also enables auth_debug.
auth_debug_passwords = {{ dovecot__logging_auth_debug_passwords | ternary('yes', 'no') }}

# Enable mail process debugging. This can help you figure out why Dovecot
# isn't finding your mails.
mail_debug = {{ dovecot__logging_mail_debug | ternary('yes', 'no') }}

# Show protocol level SSL errors.
verbose_ssl = {{ dovecot__logging_verbose_ssl | ternary('yes', 'no') }}

# mail_log plugin provides more event logging for mail processes.
plugin {
  # Events to log. Also available: flag_change append
  {{ '#' if not dovecot__plugin_mail_log }}mail_log_events = {{ dovecot__plugin_mail_log_events | join(' ') }}
  # Available fields: uid, box, msgid, from, subject, size, vsize, flags
  # size and vsize are available only for expunge and copy events.
  {{ '#' if not dovecot__plugin_mail_log }}mail_log_fields = {{ dovecot__plugin_mail_log_fields | join(' ') }}   
}

##
## Log formatting.
##

# Prefix for each line written to log file. % codes are in strftime(3)
# format.
{{ '#' if dovecot__logging_log_timestamp | length == 0 }}log_timestamp = {{ dovecot__logging_log_timestamp }}

# Space-separated list of elements we want to log. The elements which have
# a non-empty variable value are joined together to form a comma-separated
# string.
{{ '#' if dovecot__logging_login_log_format_elements | length == 0 }}login_log_format_elements = {{ dovecot__logging_login_log_format_elements }}

# Login log format. %s contains login_log_format_elements string, %$ contains
# the data we want to log.
{{ '#' if dovecot__logging_login_log_format | length == 0 }}login_log_format = {{ dovecot__logging_login_log_format }}
 
# Log prefix for mail processes. See doc/wiki/Variables.txt for list of
# possible variables you can use.
{{ '#' if dovecot__logging_mail_log_prefix | length == 0 }}mail_log_prefix = {{ dovecot__logging_mail_log_prefix }}

# Format to use for logging mail deliveries:
#  %$ - Delivery status message (e.g. "saved to INBOX")
#  %m / %{msgid} - Message-ID
#  %s / %{subject} - Subject
#  %f / %{from} - From address
#  %p / %{size} - Physical size
#  %w / %{vsize} - Virtual size
#  %e / %{from_envelope} - MAIL FROM envelope
#  %{to_envelope} - RCPT TO envelope
#  %{delivery_time} - How many milliseconds it took to deliver the mail
#  %{session_time} - How long LMTP session took, not including delivery_time
#  %{storage_id} - Backend-specific ID for mail, e.g. Maildir filename
{{ '#' if dovecot__logging_deliver_log_format | length == 0 }}deliver_log_format = {{ dovecot__logging_deliver_log_format }}
