###
### {{ ansible_managed }}
###

##
## Log destination.
##

# Log file to use for error messages. "syslog" logs to syslog,
# /dev/stderr logs to stderr.
{{'#' if not conf.log_path is defined }}log_path = {{ conf.log_path | default('syslog') }}

# Log file to use for informational messages. Defaults to log_path.
{{'#' if not conf.info_log_path is defined }}info_log_path = {{ conf.info_log_path | default('') }}
# Log file to use for debug messages. Defaults to info_log_path.
{{'#' if not conf.debug_log_path is defined }}debug_log_path = {{ conf.debug_log_path | default('') }}

# Syslog facility to use if you're logging to syslog. Usually if you don't
# want to use "mail", you'll use local0..local7. Also other standard
# facilities are supported.
{{'#' if not conf.syslog_facility is defined }}syslog_facility = {{ conf.syslog_facility | default('') }}

##
## Logging verbosity and debugging.
##

# Log filter is a space-separated list conditions. If any of the conditions
# match, the log filter matches (i.e. they're ORed together). Parenthesis
# are supported if multiple conditions need to be matched together.
#
# See https://doc.dovecot.org/configuration_manual/event_filter/ for details.
#
# For example: event=http_request_* AND category=error AND category=storage
#
# Filter to specify what debug logging to enable. This will eventually replace
# mail_debug and auth_debug settings.
{{'#' if not conf.log_debug is defined }}log_debug = {{ conf.log_debug | default('') }}

# Crash after logging a matching event. For example category=error will crash
# any time an error is logged, which can be useful for debugging.
{{'#' if not conf.log_core_filter is defined }}log_core_filter = {{ conf.log_core_filter | default('') }}

# Log unsuccessful authentication attempts and the reasons why they failed.
{{'#' if not conf.auth_verbose is defined }}auth_verbose = {{ conf.auth_verbose | default(false) | ternary('yes', 'no') }}

# In case of password mismatches, log the attempted password. Valid values are
# no, plain and sha1. sha1 can be useful for detecting brute force password
# attempts vs. user simply trying the same password over and over again.
# You can also truncate the value to n chars by appending ":n" (e.g. sha1:6).
{{'#' if not conf.auth_verbose_passwords is defined }}auth_verbose_passwords = {{ conf.auth_verbose_passwords | default(false) | ternary('yes', 'no') }}

# Even more verbose logging for debugging purposes. Shows for example SQL
# queries.
{{'#' if not conf.auth_debug is defined }}auth_debug = {{ conf.auth_debug | default(false) | ternary('yes', 'no') }}

# In case of password mismatches, log the passwords and used scheme so the
# problem can be debugged. Enabling this also enables auth_debug.
{{'#' if not conf.auth_debug_passwords is defined }}auth_debug_passwords = {{ conf.auth_debug_passwords | default(false) | ternary('yes', 'no') }}

# Enable mail process debugging. This can help you figure out why Dovecot
# isn't finding your mails.
{{'#' if not conf.mail_debug is defined }}mail_debug = {{ conf.mail_debug | default(false) | ternary('yes', 'no') }}

# Show protocol level SSL errors.
{{'#' if not conf.verbose_ssl is defined }}verbose_ssl = {{ conf.verbose_ssl | default(false) | ternary('yes', 'no') }}

# mail_log plugin provides more event logging for mail processes.
plugin {
  # Events to log. Also available: flag_change append
  {{'#' if not conf.mail_log_events is defined }}mail_log_events = {{ conf.mail_log_events | default(['delete', 'undelete', 'expunge', 'copy', 'mailbox_delete', 'mailbox_rename']) | join(' ') }}
  # Available fields: uid, box, msgid, from, subject, size, vsize, flags
  # size and vsize are available only for expunge and copy events.
  {{'#' if not conf.mail_log_fields is defined }}mail_log_fields = {{ conf.mail_log_fields | default(['uid', 'box', 'msgid', 'size']) | join(' ') }}   
}

##
## Log formatting.
##

# Prefix for each line written to log file. % codes are in strftime(3)
# format.
{{'#' if not conf.log_timestamp is defined }}log_timestamp = "{{ conf.log_timestamp | default('%b %d %H:%M:%S ') }}"

# Space-separated list of elements we want to log. The elements which have
# a non-empty variable value are joined together to form a comma-separated
# string.
{{'#' if not conf.login_log_format_elements is defined }}login_log_format_elements = {{ conf.login_log_format_elements | default('user=<%u> method=%m rip=%r lip=%l mpid=%e %c') }}

# Login log format. %s contains login_log_format_elements string, %$ contains
# the data we want to log.
{{'#' if not conf.login_log_format is defined }}login_log_format = {{ conf.login_log_format | default('%$: %s') }}
 
# Log prefix for mail processes. See doc/wiki/Variables.txt for list of
# possible variables you can use.
{{'#' if not conf.mail_log_prefix is defined }}mail_log_prefix = "{{ conf.mail_log_prefix | default('%s(%u)<%{pid}><%{session}>: ') }}"

# Format to use for logging mail deliveries:
#  %$ - Delivery status message (e.g. "saved to INBOX")
#  %m / %{msgid} - Message-ID
#  %s / %{subject} - Subject
#  %f / %{from} - From address
#  %p / %{size} - Physical size
#  %w / %{vsize} - Virtual size
#  %e / %{from_envelope} - MAIL FROM envelope
#  %{to_envelope} - RCPT TO envelope
#  %{delivery_time} - How many milliseconds it took to deliver the mail
#  %{session_time} - How long LMTP session took, not including delivery_time
#  %{storage_id} - Backend-specific ID for mail, e.g. Maildir filename
{{'#' if not conf.deliver_log_format is defined }}deliver_log_format = {{ conf.deliver_log_format | default('msgid=%m: %$') }}
