###
### {{ ansible_managed }}
###

##
## Authentication processes
##

# Disable LOGIN command and all other plaintext authentications unless
# SSL/TLS is used (LOGINDISABLED capability). Note that if the remote IP
# matches the local IP (ie. you're connecting from the same computer), the
# connection is considered secure and plaintext authentication is allowed.
# See also ssl=required setting.
{{'#' if not conf.disable_plaintext_auth is defined }}disable_plaintext_auth = {{ conf.disable_plaintext_auth | default(false) | ternary('yes', 'no') }}

# Authentication cache size (e.g. 10M). 0 means it's disabled. Note that
# bsdauth and PAM require cache_key to be set for caching to be used.
{{'#' if not conf.auth_cache_size is defined }}auth_cache_size = {{ conf.auth_cache_size | default(0) }}
# Time to live for cached data. After TTL expires the cached record is no
# longer used, *except* if the main database lookup returns internal failure.
# We also try to handle password changes automatically: If user's previous
# authentication was successful, but this one wasn't, the cache isn't used.
# For now this works only with plaintext authentication.
{{'#' if not conf.auth_cache_ttl is defined }}auth_cache_ttl = {{ conf.auth_cache_ttl | default('1 hour') }}
# TTL for negative hits (user not found, password mismatch).
# 0 disables caching them completely.
{{'#' if not conf.auth_cache_negative_ttl is defined }}auth_cache_negative_ttl = {{ conf.auth_cache_negative_ttl | default('1 hour') }}

# Space separated list of realms for SASL authentication mechanisms that need
# them. You can leave it empty if you don't want to support multiple realms.
# Many clients simply use the first one listed here, so keep the default realm
# first.
{{'#' if not conf.auth_realms is defined }}auth_realms = {{ conf.auth_realms | default('') }}

# Default realm/domain to use if none was specified. This is used for both
# SASL realms and appending @domain to username in plaintext logins.
{{'#' if not conf.auth_default_realm is defined }}auth_default_realm = {{ conf.auth_default_realm | default('') }}

# List of allowed characters in username. If the user-given username contains
# a character not listed in here, the login automatically fails. This is just
# an extra check to make sure user can't exploit any potential quote escaping
# vulnerabilities with SQL/LDAP databases. If you want to allow all characters,
# set this value to empty.
{{'#' if not conf.auth_username_chars is defined }}auth_username_chars = {{ conf.auth_username_chars | default('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890.-_@') }}

# Username character translations before it's looked up from databases. The
# value contains series of from -> to characters. For example "#@/@" means
# that '#' and '/' characters are translated to '@'.
{{'#' if not conf.auth_username_translation is defined }}auth_username_translation = {{ conf.auth_username_translation | default('') }}

# Username formatting before it's looked up from databases. You can use
# the standard variables here, eg. %Lu would lowercase the username, %n would
# drop away the domain if it was given, or "%n-AT-%d" would change the '@' into
# "-AT-". This translation is done after auth_username_translation changes.
{{'#' if not conf.auth_username_format is defined }}auth_username_format = {{ conf.auth_username_format | default('%Lu') }}

# If you want to allow master users to log in by specifying the master
# username within the normal username string (ie. not using SASL mechanism's
# support for it), you can specify the separator character here. The format
# is then <username><separator><master username>. UW-IMAP uses "*" as the
# separator, so that could be a good choice.
{{'#' if not conf.auth_master_user_separator is defined }}auth_master_user_separator = {{ conf.auth_master_user_separator | default('') }}

# Username to use for users logging in with ANONYMOUS SASL mechanism
{{'#' if not conf.auth_anonymous_username is defined }}auth_anonymous_username = {{ conf.auth_anonymous_username | default('anonymous') }}

# Maximum number of dovecot-auth worker processes. They're used to execute
# blocking passdb and userdb queries (eg. MySQL and PAM). They're
# automatically created and destroyed as needed.
{{'#' if not conf.auth_worker_max_count is defined }}auth_worker_max_count = {{ conf.auth_worker_max_count | default('30') }}

# Host name to use in GSSAPI principal names. The default is to use the
# name returned by gethostname(). Use "$ALL" (with quotes) to allow all keytab
# entries.
{{'#' if not conf.auth_gssapi_hostname is defined }}auth_gssapi_hostname = {{ conf.auth_gssapi_hostname | default('') }}

# Kerberos keytab to use for the GSSAPI mechanism. Will use the system
# default (usually /etc/krb5.keytab) if not specified. You may need to change
# the auth service to run as root to be able to read this file.
{{'#' if not conf.auth_krb5_keytab is defined }}auth_krb5_keytab = {{ conf.auth_krb5_keytab | default('') }}

# Do NTLM and GSS-SPNEGO authentication using Samba's winbind daemon and
# ntlm_auth helper. <doc/wiki/Authentication/Mechanisms/Winbind.txt>
{{'#' if not conf.auth_use_winbind is defined }}auth_use_winbind = {{ conf.auth_use_winbind | default(false) | ternary('yes', 'no') }}

# Path for Samba's ntlm_auth helper binary.
{{'#' if not conf.auth_winbind_helper_path is defined }}auth_winbind_helper_path = {{ conf.dnpaauth_winbind_helper_pathss | default('/usr/bin/ntlm_auth') }}

# Time to delay before replying to failed authentications.
{{'#' if not conf.auth_failure_delay is defined }}auth_failure_delay = {{ conf.auth_failure_delay | default('2 secs') }}

# Require a valid SSL client certificate or the authentication fails.
{{'#' if not conf.auth_ssl_require_client_cert is defined }}auth_ssl_require_client_cert = {{ conf.auth_ssl_require_client_cert | default(false) | ternary('yes', 'no') }}

# Take the username from client's SSL certificate, using 
# X509_NAME_get_text_by_NID() which returns the subject's DN's
# CommonName. 
{{'#' if not conf.auth_ssl_username_from_cert is defined }}auth_ssl_username_from_cert = {{ conf.auth_ssl_username_from_cert | default(false) | ternary('yes', 'no') }}

# Space separated list of wanted authentication mechanisms:
#   plain login digest-md5 cram-md5 ntlm rpa apop anonymous gssapi otp skey
#   gss-spnego
# NOTE: See also disable_plaintext_auth setting.
auth_mechanisms = {{ conf.hosts | default(['plain']) | join(' ') }}

##
## Password and user databases
##

#
# Password database is used to verify user's password (and nothing more).
# You can have multiple passdbs and userdbs. This is useful if you want to
# allow both system users (/etc/passwd) and virtual users to login without
# duplicating the system users into virtual database.
#
# <doc/wiki/PasswordDatabase.txt>
#
# User database specifies where mails are located and what user/group IDs
# own them. For single-UID configuration use "static" userdb.
#
# <doc/wiki/UserDatabase.txt>

{% for database in conf.databases | default([]) %}
!include {{ database }}
{% endfor %}
