---
# tasks file for roles/bootstrap

- name: Create Ansible state directory
  tags: [ bootstrap ]
  ansible.builtin.file:
    dest: /etc/ansible
    state: directory
    owner: root
    group: root
    mode: 0750

- name: Set hostname
  tags: [ bootstrap, configuration ]
  when: bootstrap__hostname | length > 0
  ansible.builtin.copy:
    dest: /etc/hostname
    content: |
      {{ bootstrap__hostname }}
    owner: root
    group: root
    mode: 0644

- name: Generate sysctl configuration
  tags: [ bootstrap, configuration ]
  ansible.builtin.template:
    src: etc/sysctl.conf.j2
    dest: /etc/sysctl.conf
    owner: root
    group: root
    mode: 0644

- name: Generate resolver configuration
  tags: [ bootstrap, configuration ]
  when: bootstrap__resolv_enable
  include_tasks: resolv.yml

- name: Configure grub
  tags: [ bootstrap, configuration ]
  when: bootstrap__grub_enable
  include_tasks: grub.yml

- name: Configure keyboard
  tags: [ bootstrap, configuration ]
  ansible.builtin.template:
    src: etc/default/keyboard.j2
    dest: /etc/default/keyboard
    owner: root
    group: root
    mode: 0644
  vars:
    keyboard_xkbmodel: "{{ bootstrap__keyboard_xkbmodel }}"
    keyboard_xkblayout: "{{ bootstrap__keyboard_xkblayout }}"
    keyboard_xkbvariant: "{{ bootstrap__keyboard_xkbvariant }}"
    keyboard_xkboptions: "{{ bootstrap__keyboard_xkboptions }}"
    keyboard_backspace: "{{ bootstrap__keyboard_backspace }}"

- name: Configure locale variables
  tags: [ bootstrap, configuration ]
  ansible.builtin.template:
    src: etc/default/locale.j2
    dest: /etc/default/locale
    owner: root
    group: root
    mode: 0644
  vars:
    locale_vars: "{{ bootstrap__locale_vars_combined }}"

- name: Configure locale.gen
  tags: [ bootstrap, configuration ]
  ansible.builtin.template:
    src: etc/locale.gen.j2
    dest: /etc/locale.gen
    owner: root
    group: root
    mode: 0644
  vars:
    locales: "{{ bootstrap__locales_combined }}"
  notify:
  - Generate locales

- name: Flush handlers
  meta: flush_handlers

- name: Generate hosts
  tags: [ bootstrap, configuration ]
  ansible.builtin.template:
    src: etc/hosts.j2
    dest: /etc/hosts
    owner: root
    group: root
    mode: 0644
  vars:
    hosts: "{{ bootstrap__hosts_combined }}"

- name: Configure timezone
  tags: [ bootstrap, configuration ]
  ansible.builtin.copy:
    dest: /etc/timezone
    content: |
      {{ bootstrap__timezone }}
    owner: root
    group: root
    mode: 0644

- name: Configure localtime
  tags: [ bootstrap, configuration ]
  ansible.builtin.file:
    src: "/usr/share/zoneinfo/{{ bootstrap__timezone }}"
    dest: /etc/localtime
    state: link

- name: Copy screen configuration
  tags: [ bootstrap, configuration ]
  ansible.builtin.copy:
    src: screenrc
    dest: /root/.screenrc
    mode: 0644

- name: Install default packages
  tags: [ bootstrap, packages ]
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  with_items: "{{ bootstrap__packages_combined }}"

- name: Generate aliases file
  tags: [ 'configuration' ]
  when: bootstrap__aliases | length > 0
  ansible.builtin.template:
    src: etc/aliases.j2
    dest: /etc/aliases
    owner: root
    group: root
    mode: 0644

- name: Create networking configuration
  tags: [ 'network', 'configuration' ]
  when: bootstrap__network_enable
  include_tasks: network.yml

- name: Add groups
  tags: [ bootstrap, account, group ]
  ansible.builtin.group:
    name: "{{ item.name }}"
    state: present
    system: "{{ item.system | default('no') }}"
  with_items: "{{ bootstrap__group }}"

- name: Add users
  tags: [ bootstrap, account, user ]
  ansible.builtin.user:
    name: "{{ item.name }}"
    comment: "{{ item.description | default('') }}"
    group: "{{ item.group }}"
    create_home: "{{ item.create_home | default('yes') }}"
    home: "{{ item.home }}"
    shell: "{{ item.shell }}"
    state: present
    system: "{{ item.system | default('no') }}"
  with_items: "{{ bootstrap__user }}"

- name: Add storage
  tags: [ bootstrap, mount, storage ]
  ansible.posix.mount:
    src: "{{ item.disk }}"
    path: "{{ item.path }}"
    opts: "{{ item.options }}"
    state: mounted
    fstype: "{{ item.fs }}"
  with_items: "{{ bootstrap__storage }}"

- name: Create nullfs source directories
  tags: [ bootstrap, mount, bind ]
  ansible.builtin.file:
    path: "{{ item.src }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
    state: directory
  with_items: "{{ bootstrap__mount }}"

- name: Create nullfs mountpoints
  tags: [ bootstrap, mount, bind ]
  ansible.builtin.file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
    state: directory
  with_items: "{{ bootstrap__mount }}"

- name: Mount nullfs locations
  tags: [ bootstrap, mount, bind ]
  ansible.posix.mount:
    src: "{{ item.src }}"
    path: "{{ item.path }}"
    opts: "{{ item.options }}"
    state: mounted
    fstype: none
  with_items: "{{ bootstrap__mount }}"
