---
# tasks file for roles/backup

- name: Install and configure backup
  tags: ["backup"]
  when: backup__enable
  block:
    - name: Create backup scripts directory
      tags: ["bootstrap", "scripts"]
      ansible.builtin.file:
        dest: "{{ backup__dir }}"
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: Copy backup scripts
      tags: ["bootstrap", "scripts"]
      ansible.builtin.copy:
        src: "usr/local/lib/backup/{{ item }}"
        dest: "{{ backup__dir }}/{{ item }}"
        mode: 0755
      with_items:
        - 900.backup
        - 910.backup.git
        - 910.backup.grafana
        - 910.backup.influxdb
        - 910.backup.mysql
        - 910.backup.openldap
        - 910.backup.postgresql
        - 910.backup.tiddlywiki
        - 950.backup.borgbackup

    - name: Create symlink to main script
      tags: ["bootstrap", "scripts"]
      when: not ansible_check_mode
      ansible.builtin.file:
        src: "{{ backup__dir }}/900.backup"
        dest: /etc/cron.daily/backup
        state: link

    - name: Generate configuration file
      tags: ["configuration"]
      ansible.builtin.template:
        src: etc/default/backup.j2
        dest: /etc/default/backup
        mode: 0640

    - name: Create backup target directory
      tags: ["bootstrap"]
      ansible.builtin.file:
        dest: "{{ backup__target_directory }}"
        state: directory
        owner: root
        group: root
        mode: 0750

- name: Configure SSH client
  tags: ["backup", "ssh"]
  when: backup__enable and backup__ssh_client_enable
  block:
    - name: Install packages for SSH
      tags: ["packages"]
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      with_items: "{{ backup__ssh_client_packages }}"

    - name: Add known hosts for backup territory
      ansible.builtin.lineinfile:
        path: ~/.ssh/known_hosts
        create: yes
        line: "{{ item }}"
      with_items: "{{ backup__ssh_known_hosts }}"

    - name: Check if backup key exists on host
      tags: ["bootstrap"]
      ansible.builtin.stat:
        path: "~/.ssh/{{ backup__ssh_key_name }}"
      register: ssh_key_stat_result

    - name: Generate SSH key pair for backup over SSH
      tags: ["bootstrap"]
      when: not ssh_key_stat_result.stat.exists
      community.crypto.openssh_keypair:
        comment: "{{ backup__ssh_comment }}"
        path: "{{ backup__ssh_key_path }}"
        size: "{{ backup__ssh_key_size }}"
        state: present

    # next two steps follow the documentation taken from Hetzner docs and Stackoverflow
    # https://docs.hetzner.com/robot/storage-box/backup-space-ssh-keys
    # https://stackoverflow.com/questions/5386482/how-to-run-the-sftp-command-with-a-password-from-bash-script#5386587
    - name: Copy public key to authorized key on storagebox
      tags: ["bootstrap"]
      when: not ssh_key_stat_result.stat.exists
      ansible.builtin.shell: |
        ssh-keygen -e -f {{ backup__ssh_key_path }}.pub | grep -v "Comment:" > {{ backup__ssh_key_path }}.rfc
        cat {{ backup__ssh_key_path }}.pub {{ backup__ssh_key_path }}.rfc > {{ backup__ssh_key_path }}.authorized_keys
        lftp -e "
        set sftp:auto-confirm true;
        open --env-password -u {{ backup__ssh_user }} sftp://{{ backup__ssh_host }};
        mkdir -f .ssh;
        chmod 700 .ssh;
        put {{ backup__ssh_key_path }}.authorized_keys -o .ssh/authorized_keys;
        chmod 600 .ssh/authorized_keys;
        bye"
      environment:
        LFTP_PASSWORD: "{{ backup__ssh_password }}"
        SSHPASS: "{{ backup__ssh_password }}"

    - name: Move SSH keys to ~/.ssh directory
      tags: ["bootstrap"]
      when: not ansible_check_mode and not ssh_key_stat_result.stat.exists
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: ~/.ssh/
        mode: 0600
        remote_src: yes
      with_items:
        - "{{ backup__ssh_key_path }}"
        - "{{ backup__ssh_key_path }}.rfc"
        - "{{ backup__ssh_key_path }}.pub"

    - name: Remove temporary SSH keys
      tags: ["bootstrap", "cleanup"]
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ backup__ssh_key_path }}"
        - "{{ backup__ssh_key_path }}.pub"
        - "{{ backup__ssh_key_path }}.rfc"
        - "{{ backup__ssh_key_path }}.authorized_keys"

- name: Configure MySQL backup
  tags: ["backup", "mysql"]
  when: backup__enable and backup__mysql_enable
  block:
    - name: Create mysql backup directory
      tags: ["bootstrap"]
      ansible.builtin.file:
        path: "{{ backup__mysql_backup_dir }}"
        state: directory
        owner: root
        group: root
        mode: 0750

- name: Configure PostgreSQL backup
  tags: ["backup", "postgresql"]
  when: backup__enable and backup__postgresql_enable
  block:
    - name: Create postgresql backup directory
      tags: ["bootstrap"]
      ansible.builtin.file:
        path: "{{ backup__postgresql_backup_dir }}"
        state: directory
        owner: postgres
        group: postgres
        mode: 0750

- name: Configure OpenLDAP backup
  tags: ["backup", "openldap"]
  when: backup__enable and backup__openldap_enable
  block:
    - name: Create openldap backup directory
      tags: ["bootstrap"]
      ansible.builtin.file:
        path: "{{ backup__openldap_backup_dir }}"
        state: directory
        owner: root
        group: root
        mode: 0750

- name: Configure borg backup
  tags: ["backup", "borg"]
  when: backup__enable and backup__borg_enable
  block:
    - name: Generate password file
      tags: ["configuration"]
      when: backup__borg_password is defined
      ansible.builtin.copy:
        dest: /root/.borg_passphrase
        content: "{{ backup__borg_password }}"
        owner: root
        group: root
        mode: 0640

    - name: Install packages for borgbackup
      tags: ["packages"]
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      with_items: "{{ backup__borg_packages }}"

    - name: Create borg cache directory
      tags: ["bootstrap"]
      when: backup__borg_cache_dir | length > 0
      ansible.builtin.file:
        path: "{{ backup__borg_cache_dir }}"
        state: directory
        owner: root
        group: root
        mode: 0750

